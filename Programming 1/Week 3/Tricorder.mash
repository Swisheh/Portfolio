/*
** file:    Tricorder.mash
** author:  Andrew Rock
** purpose: Display the values of sound, light and proximity sensors, using
**          front panel buttons to switch between sensors and toggle the 
**          floodlight, and a touch sensor to toggle a lamp output that 
**          suplements the LCD.
** note:    This version requires Lejos 0.85
*/

import nxt;

final int PRO = 1; // proximity sensor port & mode
final int SOU = 2; // sound sensor port & mode
final int LIG = 3; // light sensor port & mode
final int TOU = 4; // touch sensor port
final int LAM = B; // lamp port

int change = 0; // direction to change mode requested by left/right buttons

boolean lightOn = false; // should the floodlight be on?
boolean lampOn = false;  // should the lamp be on?

void main() {
   // Setup initial state
      setUpSensor(TOU, TOUCH);
      setUpSensor(SOU, SOUND);
      setUpSensor(LIG, LIGHT_NOFLOOD);
      setUpSensor(PRO, PROXIMITY);
      int mode = SOU;
      int low = 9999;
      int high = 0;
      int value = 666;
      sleep(500);
      listenPort4();
      int dummy = getDistance(PRO); // first reading is rubbish
      drawString("     SOUND     ", 1, 3);
   while (true) {
      // Handle requests to change mode
         if (change > 0) {
            sleep(200);
            if (mode == PRO) {
               mode = SOU;
               drawString("     SOUND     ", 1, 3);
            } else if (mode == SOU) {
               mode = LIG;
               drawString("          LIGHT", 1, 3);
            } else {
               mode = PRO;
               drawString("PROXIMITY      ", 1, 3);
            }
            low = 9999;
            high = 0;
            change = change - 1;
         } else if (change < 0) {
            sleep(200);
            if (mode == PRO) {
               mode = LIG;
               drawString("          LIGHT", 1, 3);
            } else if (mode == LIG) {
               mode = SOU;
               drawString("     SOUND     ", 1, 3);
            } else {
               mode = PRO;
               drawString("PROXIMITY      ", 1, 3);
            }
            low = 9999;
            high = 0;
            change = change + 1;
         }
      // get current value and update display
         if (mode == PRO) {
            value = getDistance(PRO);
         } else if (mode == SOU) {
            value = getVolume(SOU);
         } else {
            value = getLight(LIG);
         }
         drawString("value = " + value + "     ", 1, 4);
         if (low > value) {
            low = value;
            drawString("min = " + low + "        ", 1, 5);
         } 
         if (high < value) {
            high = value;
            drawString("max = " + high + "        ", 1, 6);
         } 
         if (lampOn && mode == PRO) {
            lampOn(LAM, max(0, 100 - value / 2));
         } else if (lampOn) {
            lampOn(LAM, value);
         } else {
            lampOff(LAM);
         }
   }
}

// Left button cycles mode to left.
void onReleaseLeft() {
   change = change - 1;
}

// Right button cycles mode to right.
void onReleaseRight() {
   change = change + 1;
}

// Enter button toggles the floodlight.
void onReleaseEnter() {
   lightOn = !lightOn;
   setFloodlight(LIG, lightOn);
}

// Touch sensor events toggle the lamp.
void onChange4(int oldValue, int newValue) {
   if (isPushed(TOU)) {
      beep();
      lampOn = !lampOn;
   } else {
   }
}
